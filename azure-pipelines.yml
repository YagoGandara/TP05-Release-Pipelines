trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  node_version: '20.x'
  python_version: '3.12'
  azureConnection: 'azure-tp05-connection'

  # Nombres de las Web Apps
  apiQaName:   '$(apiAppNameQA)'
  apiProdName: '$(apiAppNamePROD)'
  webQaName:   '$(webAppNameQA)'
  webProdName: '$(webAppNamePROD)'

stages:
# ==================== BUILD ====================
- stage: Build
  displayName: Build & Test
  jobs:
  - job: frontend
    displayName: Build Frontend (Angular)
    steps:
    - checkout: self
    - task: NodeTool@0
      inputs: { versionSpec: '$(node_version)' }

    - script: |
        cd frontend
        npm ci --no-audit --no-fund || npm i --no-audit --no-fund --legacy-peer-deps
        npm run build
      displayName: 'npm ci & ng build'

    - task: ArchiveFiles@2
      displayName: 'Zip dist (front)'
      inputs:
        rootFolderOrFile: 'frontend/dist/tp05-web'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/front-dist.zip'
        archiveType: 'zip'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/front-dist.zip'
        artifactName: 'front'
        publishLocation: 'Container'

  - job: backend
    displayName: Test & Package Backend (FastAPI)
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs: { versionSpec: '$(python_version)', architecture: 'x64' }

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m pytest -q
      displayName: 'Install deps & run tests'
      workingDirectory: backend   # <--- clave

    - task: ArchiveFiles@2
      displayName: 'Zip backend app'
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        archiveType: 'zip'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/backend.zip'
        artifactName: 'back'
        publishLocation: 'Container'

# ==================== DEPLOY QA ====================
- stage: DeployQA
  displayName: Deploy to QA
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: QaDeploy
    displayName: Deploy Front & API to QA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: front
          - download: current
            artifact: back

          # Front a WebApp QA (sirve /index.html como SPA)
          - task: AzureWebApp@1
            displayName: 'Deploy FRONT to $(webQaName)'
            inputs:
              azureSubscription: '$(azureConnection)'
              appType: 'webAppLinux'     # Linux plan
              appName: '$(webQaName)'
              package: '$(Pipeline.Workspace)/front/front-dist.zip'
              deploymentMethod: 'zipDeploy'

          # API a WebApp QA
          - task: AzureWebApp@1
            displayName: 'Deploy API to $(apiQaName)'
            inputs:
              azureSubscription: '$(azureConnection)'
              appType: 'webAppLinux'
              appName: '$(apiQaName)'
              package: '$(Pipeline.Workspace)/back/backend.zip'
              deploymentMethod: 'zipDeploy'

          # Health checks (con reintentos)
          - script: |
              set -e
              echo "Waiting API to be ready..."
              for i in {1..20}; do
                curl -fsS "$(apiBaseUrlQA)readyz" && break || sleep 5
              done
              curl -fsS "$(apiBaseUrlQA)healthz"

              echo "Checking FRONT (index)..."
              for i in {1..20}; do
                curl -fsS "$(webBaseUrlQA)" && break || sleep 5
              done
            displayName: 'Smoke tests QA'

# ================== DEPLOY PROD (con approval) ==================
- stage: DeployPROD
  displayName: Deploy to PROD
  dependsOn: DeployQA
  condition: succeeded()
  jobs:
  - deployment: ProdDeploy
    displayName: Deploy Front & API to PROD
    environment: 'PROD'    # <-- configurÃ¡ approval en el Environment
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: front
          - download: current
            artifact: back

          - task: AzureWebApp@1
            displayName: 'Deploy FRONT to $(webProdName)'
            inputs:
              azureSubscription: '$(azureConnection)'
              appType: 'webAppLinux'
              appName: '$(webProdName)'
              package: '$(Pipeline.Workspace)/front/front-dist.zip'
              deploymentMethod: 'zipDeploy'

          - task: AzureWebApp@1
            displayName: 'Deploy API to $(apiProdName)'
            inputs:
              azureSubscription: '$(azureConnection)'
              appType: 'webAppLinux'
              appName: '$(apiProdName)'
              package: '$(Pipeline.Workspace)/back/backend.zip'
              deploymentMethod: 'zipDeploy'

          - script: |
              set -e
              echo "Waiting API to be ready..."
              for i in {1..20}; do
                curl -fsS "$(apiBaseUrlPROD)readyz" && break || sleep 5
              done
              curl -fsS "$(apiBaseUrlPROD)healthz"
              echo "Checking FRONT (index)..."
              for i in {1..20}; do
                curl -fsS "$(webBaseUrlPROD)" && break || sleep 5
              done
            displayName: 'Smoke tests PROD'
