trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  node_version: '20.x'
  python_version: '3.12'
  azureConnection: 'azure-tp05-connection'

  # Nombres de las Web Apps (las tomás de variables de UI)
  apiQaName:   '$(apiAppNameQA)'
  apiProdName: '$(apiAppNamePROD)'
  webQaName:   '$(webAppNameQA)'
  webProdName: '$(webAppNamePROD)'

  # Toggle de pruebas de humo
  runSmokeTests: 'false'   # poné 'true' si querés ejecutarlas

stages:
# ==================== BUILD ====================
- stage: Build
  displayName: Build & Test
  jobs:
  - job: frontend
    displayName: Build Frontend (un solo build)
    steps:
    - checkout: self
    - task: NodeTool@0
      inputs: { versionSpec: '$(node_version)' }

    - script: |
        cd frontend
        npm ci --no-audit --no-fund || npm i --no-audit --no-fund --legacy-peer-deps
        npm run build -- --configuration=production
      displayName: 'npm ci & ng build (production)'

    - script: |
        set -e
        cd frontend/dist/tp05-web
        zip -r "$(Build.ArtifactStagingDirectory)/front.zip" .
      displayName: 'Zip dist (front)'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/front.zip'
        artifactName: 'front'
        publishLocation: 'Container'

  - job: backend
    displayName: Test & Package Backend (FastAPI)
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs: { versionSpec: '$(python_version)', architecture: 'x64' }

    - script: |
        set -e
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install deps'
      workingDirectory: backend

    - task: ArchiveFiles@2
      displayName: 'Zip backend app'
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        archiveType: 'zip'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/backend.zip'
        artifactName: 'back'
        publishLocation: 'Container'

# ==================== DEPLOY QA ====================
- stage: DeployQA
  displayName: Deploy to QA
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: QaDeploy
    displayName: Deploy Front & API to QA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: front
          - download: current
            artifact: back

          # Genero env.js QA
          - script: |
              set -e
              echo "window.__env = { apiBase: '$(apiBaseUrlQA)' };" > "$(Pipeline.Workspace)/env.qa.js"
            displayName: 'Generate env.js (QA)'

          #Re-empaqueto el front + env.js en un nuevo zip
          - script: |
              set -e
              mkdir -p "$(Pipeline.Workspace)/front_qa_unpack"
              cd "$(Pipeline.Workspace)/front_qa_unpack"
              unzip -q "$(Pipeline.Workspace)/front/front.zip"
              mkdir -p assets
              cp "$(Pipeline.Workspace)/env.qa.js" assets/env.js
              zip -qr "$(Pipeline.Workspace)/front-qa-with-env.zip" .
            displayName: 'Repackage front with env.js (QA)' 

          #Hago un solo Zip Deploy del front con el env.js
          - task: AzureWebApp@1
            displayName: 'Deploy FRONT to $(webQaName)'
            inputs:
              azureSubscription: '$(azureConnection)'
              appType: 'webAppLinux'
              appName: '$(webQaName)'
              package: '$(Pipeline.Workspace)/front-qa-with-env.zip'
              deploymentMethod: 'zipDeploy'     

          - task: AzureWebApp@1
            displayName: 'Deploy API to $(apiQaName)'
            inputs:
              azureSubscription: '$(azureConnection)'
              appType: 'webAppLinux'
              appName: '$(apiQaName)'
              package: '$(Pipeline.Workspace)/back/backend.zip'
              deploymentMethod: 'zipDeploy'

          - script: |
              set -e
              echo "Seeding QA..."
              curl -fsS -X POST "$(apiBaseUrlQA)admin/seed" -H "X-Seed-Token: $(seedTokenQA)"
              echo "Seed QA OK"
            displayName: 'Seed DB (QA)'

          - script: |
              set -e
              echo "Waiting API to be ready..."
              for i in {1..20}; do
                curl -fsS "$(apiBaseUrlQA)readyz" && break || sleep 5
              done
              curl -fsS "$(apiBaseUrlQA)healthz"
              echo "Checking FRONT (index)..."
              for i in {1..20}; do
                curl -fsS "$(webBaseUrlQA)" && break || sleep 5
              done
            displayName: 'Smoke tests QA'
            condition: and(succeeded(), eq(variables['runSmokeTests'], 'true'))

# ================== DEPLOY PROD (con approval) ==================
- stage: DeployPROD
  displayName: Deploy to PROD
  dependsOn: DeployQA
  condition: succeeded()
  jobs:
  - deployment: ProdDeploy
    displayName: Deploy Front & API to PROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: front
          - download: current
            artifact: back

          #Genero env.js para PROD
          - script: |
              set -e
              echo "window.__env = { apiBase: '$(apiBaseUrlPROD)' };" > "$(Pipeline.Workspace)/env.prod.js"
            displayName: 'Generate env.js (PROD)'

          #Re empaqueto el front + env.js PROD  
          - script: |
              set -e
              mkdir -p "$(Pipeline.Workspace)/front_prod_unpack"
              cd "$(Pipeline.Workspace)/front_prod_unpack"
              unzip -q "$(Pipeline.Workspace)/front/front.zip"
              mkdir -p assets
              cp "$(Pipeline.Workspace)/env.prod.js" assets/env.js
              zip -qr "$(Pipeline.Workspace)/front-prod-with-env.zip" .
            displayName: 'Repackage front with env.js (PROD)'
          
          # Un solo deploy de FRONT
          - task: AzureWebApp@1
            displayName: 'Deploy FRONT to $(webProdName)'
            inputs:
              azureSubscription: '$(azureConnection)'
              appType: 'webAppLinux'
              appName: '$(webProdName)'
              package: '$(Pipeline.Workspace)/front-prod-with-env.zip'
              deploymentMethod: 'zipDeploy'

          - task: AzureWebApp@1
            displayName: 'Deploy API to $(apiProdName)'
            inputs:
              azureSubscription: '$(azureConnection)'
              appType: 'webAppLinux'
              appName: '$(apiProdName)'
              package: '$(Pipeline.Workspace)/back/backend.zip'
              deploymentMethod: 'zipDeploy'

          - script: |
              set -e
              echo "Seeding PROD..."
              curl -fsS -X POST "$(apiBaseUrlPROD)admin/seed" -H "X-Seed-Token: $(seedTokenPROD)"
              echo "Seed PROD OK"
            displayName: 'Seed DB (PROD)'

            
          - script: |
              set -e
              echo "Waiting API to be ready..."
              for i in {1..20}; do
                curl -fsS "$(apiBaseUrlPROD)readyz" && break || sleep 5
              done
              curl -fsS "$(apiBaseUrlPROD)healthz"
              echo "Checking FRONT (index)..."
              for i in {1..20}; do
                curl -fsS "$(webBaseUrlPROD)" && break || sleep 5
              done
            displayName: 'Smoke tests PROD'
            condition: and(succeeded(), eq(variables['runSmokeTests'], 'true'))
